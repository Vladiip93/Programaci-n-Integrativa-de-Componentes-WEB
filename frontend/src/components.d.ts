/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Task } from "./models/task.model";
export { Task } from "./models/task.model";
export namespace Components {
    interface AppRoot {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface TaskForm {
    }
    interface TaskItem {
        "task": Task;
    }
    interface TaskList {
    }
}
export interface TaskFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskFormElement;
}
export interface TaskItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskItemElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLTaskFormElementEventMap {
        "taskCreated": void;
    }
    interface HTMLTaskFormElement extends Components.TaskForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskFormElementEventMap>(type: K, listener: (this: HTMLTaskFormElement, ev: TaskFormCustomEvent<HTMLTaskFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskFormElementEventMap>(type: K, listener: (this: HTMLTaskFormElement, ev: TaskFormCustomEvent<HTMLTaskFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskFormElement: {
        prototype: HTMLTaskFormElement;
        new (): HTMLTaskFormElement;
    };
    interface HTMLTaskItemElementEventMap {
        "taskUpdated": void;
        "taskDeleted": void;
    }
    interface HTMLTaskItemElement extends Components.TaskItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskItemElementEventMap>(type: K, listener: (this: HTMLTaskItemElement, ev: TaskItemCustomEvent<HTMLTaskItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskItemElementEventMap>(type: K, listener: (this: HTMLTaskItemElement, ev: TaskItemCustomEvent<HTMLTaskItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskItemElement: {
        prototype: HTMLTaskItemElement;
        new (): HTMLTaskItemElement;
    };
    interface HTMLTaskListElement extends Components.TaskList, HTMLStencilElement {
    }
    var HTMLTaskListElement: {
        prototype: HTMLTaskListElement;
        new (): HTMLTaskListElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "my-component": HTMLMyComponentElement;
        "task-form": HTMLTaskFormElement;
        "task-item": HTMLTaskItemElement;
        "task-list": HTMLTaskListElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface TaskForm {
        "onTaskCreated"?: (event: TaskFormCustomEvent<void>) => void;
    }
    interface TaskItem {
        "onTaskDeleted"?: (event: TaskItemCustomEvent<void>) => void;
        "onTaskUpdated"?: (event: TaskItemCustomEvent<void>) => void;
        "task"?: Task;
    }
    interface TaskList {
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "my-component": MyComponent;
        "task-form": TaskForm;
        "task-item": TaskItem;
        "task-list": TaskList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "task-form": LocalJSX.TaskForm & JSXBase.HTMLAttributes<HTMLTaskFormElement>;
            "task-item": LocalJSX.TaskItem & JSXBase.HTMLAttributes<HTMLTaskItemElement>;
            "task-list": LocalJSX.TaskList & JSXBase.HTMLAttributes<HTMLTaskListElement>;
        }
    }
}
